1
00:00:01,530 --> 00:00:02,730
okay, hello everyone.

2
00:00:02,730 --> 00:00:06,809
This will be quick overview of, Anari backend, repo, how it

3
00:00:06,809 --> 00:00:10,330
works, and, the main logic behind, the structure and certain

4
00:00:10,330 --> 00:00:12,729
files that we have and the naming conventions and all of this.

5
00:00:13,450 --> 00:00:16,030
Supposedly this will be put in the README file at the end.

6
00:00:16,030 --> 00:00:18,180
So, here in another monitor I have the,

7
00:00:18,720 --> 00:00:20,760
uh, topics that, I'll discuss today.

8
00:00:21,915 --> 00:00:25,365
And we'll go one by one through them and then we'll

9
00:00:25,365 --> 00:00:27,395
see if there's anything that, was left unsaid.

10
00:00:28,175 --> 00:00:30,564
So the very first thing is a little bit weird.

11
00:00:30,684 --> 00:00:32,414
It's outside of the scope of what we're

12
00:00:32,474 --> 00:00:34,944
seeing right now, is literally just a tip.

13
00:00:35,184 --> 00:00:37,644
Just before we get started, about, vs.

14
00:00:37,644 --> 00:00:40,501
Code, the IDE that I'm using here today, we probably know

15
00:00:40,501 --> 00:00:43,261
this, but, there is a functionality called the global search.

16
00:00:43,261 --> 00:00:45,813
you, uh, type control shift f in windows.

17
00:00:45,863 --> 00:00:46,973
I'm sorry, I'm not a Mac user.

18
00:00:46,973 --> 00:00:50,143
and that will make you that will allow you to search for

19
00:00:50,143 --> 00:00:52,873
the, for a specific term that you put here in the entire repo

20
00:00:52,873 --> 00:00:56,863
and tell you the files, uh, that have this term and where

21
00:00:56,863 --> 00:00:59,743
it was set, and you can click on it as you are seeing here.

22
00:01:00,073 --> 00:01:01,723
This is very useful, very.

23
00:01:02,078 --> 00:01:04,428
And I'll be using this a lot in today's video.

24
00:01:04,768 --> 00:01:06,358
I just thought I'd, I'll tell you this.

25
00:01:06,868 --> 00:01:10,168
Um, and another cool short shortcut is Control

26
00:01:10,168 --> 00:01:12,748
P for me to go between different pages.

27
00:01:13,528 --> 00:01:13,738
Okay.

28
00:01:14,068 --> 00:01:16,838
So this is quicker than viewing the explorer from

29
00:01:16,838 --> 00:01:20,378
here and collapsing and seeing the structure from

30
00:01:20,378 --> 00:01:22,348
the start and navigating to where I want to go.

31
00:01:22,933 --> 00:01:25,113
So control P is a lot quicker, but that's when

32
00:01:25,113 --> 00:01:26,723
you get a feel around the project structure

33
00:01:26,733 --> 00:01:28,653
you'll be using this, these, shortcuts more.

34
00:01:29,313 --> 00:01:31,118
Now let's actually start to the start

35
00:01:31,183 --> 00:01:32,443
talking about the project itself.

36
00:01:33,103 --> 00:01:36,373
Uh, first I'll be talking about the general

37
00:01:36,373 --> 00:01:38,563
structure of the repositories folders.

38
00:01:38,873 --> 00:01:41,583
Right here, the main folders that we have, I

39
00:01:41,583 --> 00:01:43,653
will just briefly go through, through them.

40
00:01:43,753 --> 00:01:46,123
And so we have the first folder called data.

41
00:01:46,493 --> 00:01:49,343
It doesn't have anything else but ma folder.

42
00:01:49,673 --> 00:01:52,493
And, data here is initially just, a folder where we get

43
00:01:52,913 --> 00:01:57,473
data specific to specific tasks, but since we, we rarely

44
00:01:57,473 --> 00:02:01,493
use this folder, it's only, it only has this file from the

45
00:02:01,773 --> 00:02:05,583
and you'll see some inconsistencies in the structure here.

46
00:02:06,013 --> 00:02:08,113
So you can, after this meeting, you'll probably

47
00:02:08,853 --> 00:02:12,313
s ee a function that can go to utilities.

48
00:02:12,838 --> 00:02:15,658
As you see later, there is a folder code utilities, and you're

49
00:02:15,658 --> 00:02:20,028
probably right like, there can be some reordering done to

50
00:02:20,028 --> 00:02:22,508
the project to make it more to make it easier to understand.

51
00:02:22,958 --> 00:02:24,698
But this is the general structure for now.

52
00:02:25,188 --> 00:02:28,178
I'll probably pin this recording to a specific version of GitHub.

53
00:02:28,388 --> 00:02:31,568
This, if someone wants to trace, what I'm doing here with

54
00:02:31,658 --> 00:02:33,848
the current, with the version that I'm using right now.

55
00:02:33,898 --> 00:02:35,998
So it doesn't have anything else, just this function.

56
00:02:36,058 --> 00:02:37,708
And we'll see what this function does.

57
00:02:37,988 --> 00:02:38,378
Later.

58
00:02:39,228 --> 00:02:41,648
I'm just going through the overall overview of of the

59
00:02:41,648 --> 00:02:44,468
tasks, functionalities of the full functionalities.

60
00:02:44,908 --> 00:02:47,098
The, this cache directory is just for caching.

61
00:02:47,218 --> 00:02:49,418
You won't see that, like it's just, is there when

62
00:02:49,418 --> 00:02:51,478
you run the code, but, it's not really important.

63
00:02:51,568 --> 00:02:54,298
It's just internal code by the, this cash library.

64
00:02:54,568 --> 00:02:55,678
And so we'll go to that later.

65
00:02:56,278 --> 00:02:58,158
Uh, we then have, the docs folder.

66
00:02:58,848 --> 00:03:01,988
And, these, as you probably know, is for

67
00:03:01,988 --> 00:03:04,478
documentation related, stuff in our project.

68
00:03:04,988 --> 00:03:07,508
And, We'll, we'll probably the recordings only

69
00:03:07,508 --> 00:03:09,503
just have the list of chapters that I'm reading

70
00:03:09,593 --> 00:03:11,783
from right now, the topics that I'll talk about.

71
00:03:12,423 --> 00:03:14,673
But we'll see where we'll actually put this recording in the end.

72
00:03:15,423 --> 00:03:17,493
And then the structure of API responses,

73
00:03:18,063 --> 00:03:19,773
this is a, okay, let me explain this.

74
00:03:20,523 --> 00:03:23,673
Specific parts of the code I am receiving or sending

75
00:03:23,673 --> 00:03:27,433
data, that you don't really see its structure in the code.

76
00:03:27,793 --> 00:03:32,603
And then if you see these JSON files, it'll be easier for you to,

77
00:03:32,603 --> 00:03:35,793
to have a mental model of what we are dealing with in the code.

78
00:03:36,398 --> 00:03:40,323
So, for example, this is, a first, API request received from zrok.

79
00:03:40,343 --> 00:03:42,473
You'll see that I am very subtle in

80
00:03:42,473 --> 00:03:44,423
my naming conventions in the files.

81
00:03:44,483 --> 00:03:46,163
Any long name then, that's made by me.

82
00:03:46,778 --> 00:03:49,403
so so as you can see here, it's a bit long.

83
00:03:49,883 --> 00:03:53,733
So as literally the name says if you have a first request

84
00:03:54,133 --> 00:03:57,923
that's received from a I'll explain what this is in a second.

85
00:03:58,343 --> 00:04:00,923
Then expect a structure like this.

86
00:04:01,193 --> 00:04:03,263
I literally, to get this, I printed it

87
00:04:03,263 --> 00:04:05,333
out in the terminal and put it here.

88
00:04:05,693 --> 00:04:07,563
I abstracted some info here this was

89
00:04:07,563 --> 00:04:09,178
actually an object in the terminal.

90
00:04:09,178 --> 00:04:11,098
So I said that this refers to an object

91
00:04:11,098 --> 00:04:12,648
instead of putting its elements and et cetera.

92
00:04:12,968 --> 00:04:14,793
This is useful just for you to have a mental model.

93
00:04:15,543 --> 00:04:17,643
You, in this request object, you can say request

94
00:04:17,643 --> 00:04:20,843
dot scope or request do headers and you'll know what

95
00:04:20,843 --> 00:04:22,403
you expect, the structure of what you're expecting.

96
00:04:23,183 --> 00:04:25,903
I think this is this normal info that anyone who

97
00:04:25,903 --> 00:04:29,063
used the fast DPI knows, but I thought I'd write

98
00:04:29,063 --> 00:04:30,953
it and put little explanations here nonetheless.

99
00:04:31,473 --> 00:04:33,313
And then you have these other files.

100
00:04:33,673 --> 00:04:35,233
These are related to WhatsApp logic.

101
00:04:35,653 --> 00:04:38,443
We can get to this later, but essentially when we were

102
00:04:38,443 --> 00:04:42,833
dealing with Meta's, API to to get the requests from users on

103
00:04:42,833 --> 00:04:45,843
WhatsApp, sorry, WhatsApp we get these requests in this format.

104
00:04:46,263 --> 00:04:48,823
This is based on meta documentation, but meta's

105
00:04:48,823 --> 00:04:51,133
documentation isn't really clear to be honest.

106
00:04:51,613 --> 00:04:54,303
So I just got the request and printed

107
00:04:54,303 --> 00:04:55,623
it again internal and put it here.

108
00:04:56,088 --> 00:05:00,448
Yeah, so this again, to give you a middle model and any any

109
00:05:00,478 --> 00:05:05,058
unique stuff I abstracted it into, uh, these delimiters, the

110
00:05:05,058 --> 00:05:08,428
this double Z and double more than that I've hardcoded this here.

111
00:05:09,028 --> 00:05:11,768
Um, And here, for example, I'm

112
00:05:11,768 --> 00:05:13,788
seeing possible values for this key.

113
00:05:13,998 --> 00:05:16,578
So this can be true or false and et cetera,

114
00:05:16,908 --> 00:05:18,498
like you understand when you see this file.

115
00:05:18,498 --> 00:05:21,238
But I, I really just wanna skim over the folders

116
00:05:21,238 --> 00:05:22,878
just for you to get a gist of the layout.

117
00:05:23,028 --> 00:05:25,368
Like layout of the land, of this repo.

118
00:05:25,698 --> 00:05:27,408
And these are a similar files.

119
00:05:27,678 --> 00:05:30,468
So the difference here is this, when you get a reply message

120
00:05:30,468 --> 00:05:33,498
you from the API of WhatsApp, you, it'll be, it'll have these

121
00:05:33,498 --> 00:05:37,638
keys and, and this is when using zrok like this is when the

122
00:05:37,638 --> 00:05:40,698
request comes from a zrok, not from the actual WhatsApp server.

123
00:05:40,698 --> 00:05:45,308
Again, explain And this is for the final user message.

124
00:05:45,548 --> 00:05:48,318
These are really detailed based on the on the code

125
00:05:48,318 --> 00:05:50,218
that I'll show you later or the WhatsApp code.

126
00:05:50,648 --> 00:05:54,648
So I'll neglect like full explanation of them now, but when

127
00:05:54,648 --> 00:05:56,648
you trace the code there, you, these will make sense for you.

128
00:05:57,393 --> 00:06:00,243
You'll know which one is rated to which, uh, logic.

129
00:06:00,993 --> 00:06:03,173
And finally we have this notebook file.

130
00:06:03,603 --> 00:06:04,923
This is it to HGBT.

131
00:06:04,983 --> 00:06:08,343
So how we receive the completion objects.

132
00:06:08,523 --> 00:06:13,673
So when you send a request to an LLM model, you you expect

133
00:06:13,673 --> 00:06:17,148
from from the the from the M provider, a response object.

134
00:06:17,778 --> 00:06:20,508
So this response object is what I have stored here.

135
00:06:20,628 --> 00:06:22,638
I, again, printed internal and I have it.

136
00:06:22,638 --> 00:06:24,228
So this is a model response object.

137
00:06:24,233 --> 00:06:27,493
This is a python object, which contains these attributes.

138
00:06:27,493 --> 00:06:28,213
Idea and choices.

139
00:06:28,213 --> 00:06:30,333
And choices is a list of streaming choices

140
00:06:30,333 --> 00:06:31,743
and this is another object and et cetera.

141
00:06:32,283 --> 00:06:35,863
I did like I, I also took that from the terminal and

142
00:06:35,863 --> 00:06:38,743
pasted in here just for me to mentally visualize things.

143
00:06:38,863 --> 00:06:41,928
This will be useful when we go to the to an, sorry, the file.

144
00:06:42,573 --> 00:06:44,943
Like any file that does the coding of

145
00:06:44,943 --> 00:06:47,253
the actual element done in these people.

146
00:06:47,563 --> 00:06:52,663
And here you see yeah, an explanation of each attribute here.

147
00:06:53,203 --> 00:06:57,563
So, The possible values, which can be mentioned here and here.

148
00:06:57,983 --> 00:06:59,213
So for example, the content.

149
00:06:59,213 --> 00:06:59,633
What is this?

150
00:06:59,633 --> 00:07:01,133
It's the content of the junk message itself.

151
00:07:01,628 --> 00:07:02,798
But, so what is a chunk?

152
00:07:02,798 --> 00:07:04,928
It's based on if you're doing streaming or not.

153
00:07:04,928 --> 00:07:06,818
So if you're not streaming, then this will not be a

154
00:07:06,818 --> 00:07:09,458
chunk, it'll be the whole message and all of these

155
00:07:09,458 --> 00:07:12,058
details, if you read this file one by one understand I'm

156
00:07:12,058 --> 00:07:14,818
very explicit in explaining the contents of this file.

157
00:07:15,028 --> 00:07:17,608
As you can see, again, any long names or long

158
00:07:17,608 --> 00:07:19,518
explanations, and you know that I'm the one who did that.

159
00:07:20,118 --> 00:07:22,678
Um, This is related to talks.

160
00:07:22,768 --> 00:07:27,178
I just wanna make sure that I'm following the plan properly.

161
00:07:27,803 --> 00:07:29,783
Yeah, explain docs.

162
00:07:29,873 --> 00:07:30,353
Great.

163
00:07:30,933 --> 00:07:31,203
Okay.

164
00:07:31,203 --> 00:07:33,153
so next we have the SQL files here.

165
00:07:33,543 --> 00:07:35,183
And this is this is a tricky part of this.

166
00:07:35,363 --> 00:07:37,403
So basically what we have been doing since the

167
00:07:37,403 --> 00:07:41,093
start of this project is that we were writing the

168
00:07:41,093 --> 00:07:44,313
SQL code with using the postgre sql, by the way.

169
00:07:44,868 --> 00:07:49,468
So we're writing the SQ code to create the tables.

170
00:07:50,308 --> 00:07:53,338
And whenever we make changes, we don't

171
00:07:53,788 --> 00:07:55,408
alter the initially written code.

172
00:07:56,428 --> 00:07:59,108
For example APO might do the following.

173
00:07:59,318 --> 00:08:01,728
They might make a file called DB setup

174
00:08:01,968 --> 00:08:04,708
sql, and it just have the SQL command.

175
00:08:05,428 --> 00:08:08,248
And then whenever we make changes, like for example, we.

176
00:08:08,623 --> 00:08:11,593
Let's say for example, later on, I decided to change

177
00:08:11,593 --> 00:08:14,653
this first name to first username, for example.

178
00:08:14,713 --> 00:08:18,463
So I wanna change this column name, then some repos.

179
00:08:18,703 --> 00:08:22,663
What they do is that they change, um, the code

180
00:08:23,203 --> 00:08:27,253
here in line eight and change it to first username.

181
00:08:27,683 --> 00:08:31,203
And then we do the changes ourselves in the in the production.

182
00:08:31,203 --> 00:08:32,613
So if you have the production server running

183
00:08:32,613 --> 00:08:35,373
right now with this table created, then.

184
00:08:35,853 --> 00:08:39,703
We go to the the production server, and then we do a, an alter

185
00:08:39,703 --> 00:08:43,343
command alter first name and to be alter username first username.

186
00:08:43,773 --> 00:08:45,963
And then here when we update this script,

187
00:08:46,413 --> 00:08:48,783
we just change this to first username.

188
00:08:49,203 --> 00:08:50,973
Okay, here, we don't do this.

189
00:08:51,043 --> 00:08:51,823
We don't do this social.

190
00:08:52,363 --> 00:08:53,033
Then What do we do?

191
00:08:53,043 --> 00:08:55,053
We do incremental changes as you see here.

192
00:08:55,443 --> 00:08:57,363
So 0 1, 0 2, 0 3.

193
00:08:57,363 --> 00:09:01,533
That means that at some point in the project, we did this change.

194
00:09:02,103 --> 00:09:03,603
And then in the future, if we wanna update

195
00:09:03,603 --> 00:09:05,823
something, then we create a zero two file.

196
00:09:06,183 --> 00:09:07,563
And then we say what we updated.

197
00:09:08,463 --> 00:09:11,183
And this has an advantage and disadvantage.

198
00:09:11,243 --> 00:09:14,483
An advantage is that we know exactly how we, how, like

199
00:09:14,693 --> 00:09:17,523
you have a history of how we changed the database,

200
00:09:17,703 --> 00:09:19,953
our database, like what exact commands that we did.

201
00:09:20,163 --> 00:09:22,563
So we ensure successful replication each time.

202
00:09:23,013 --> 00:09:25,893
But the disadvantage is to make this replication,

203
00:09:25,893 --> 00:09:29,448
we need to run all these So if I were to right now

204
00:09:29,988 --> 00:09:33,348
instantiate a local database in my, in my laptop

205
00:09:33,348 --> 00:09:35,778
here, then I'll have to run these files one by one.

206
00:09:36,418 --> 00:09:38,518
This is a disadvantage, but this is how we

207
00:09:38,548 --> 00:09:41,548
did it and we stuck with this logic for now.

208
00:09:42,178 --> 00:09:46,788
Um, and this logic is useful for you to know.

209
00:09:47,088 --> 00:09:49,428
And another two files, actually I will.

210
00:09:49,813 --> 00:09:52,723
I'll go buy them really quick and then get back to them later.

211
00:09:53,263 --> 00:09:56,533
Uh, called set up database and Python app.

212
00:09:57,013 --> 00:10:00,793
So again, I'll go to them again, but just to, to

213
00:10:00,793 --> 00:10:02,743
tell you why this logic is important and you can

214
00:10:02,743 --> 00:10:05,203
just change this logic because changing this logic,

215
00:10:05,773 --> 00:10:08,173
uh, will employ you change these files as well.

216
00:10:08,653 --> 00:10:10,963
So instead of database, it's just a file that we made

217
00:10:10,963 --> 00:10:14,003
that if you want to set up this database locally, then

218
00:10:14,003 --> 00:10:16,798
you can run the script and it'll import the files here.

219
00:10:17,903 --> 00:10:20,633
Like it'll run this passing the SQ l directory,

220
00:10:20,633 --> 00:10:22,373
which is sql, which is what I shown you above

221
00:10:22,373 --> 00:10:26,443
here, SQL the DB URL which is in get settings.

222
00:10:26,443 --> 00:10:29,983
I will explain this later, but in short is just a, it has

223
00:10:29,983 --> 00:10:33,453
this default value, so it'll set up locally with these URL.

224
00:10:34,083 --> 00:10:37,833
Uh, And it'll create it and we'll create it via this function,

225
00:10:37,833 --> 00:10:41,638
which will go through, iterate over each file that ends with SQL.

226
00:10:42,258 --> 00:10:45,008
See, so so if we are actually here, because I was about

227
00:10:45,008 --> 00:10:47,808
to do this at some point I was about to, for example, to

228
00:10:47,808 --> 00:10:51,358
create a an SQL here called an aggregated or all commands

229
00:10:51,358 --> 00:10:54,568
do sql, for example, which is just me concatenating all

230
00:10:54,568 --> 00:10:57,268
the SQLs in this file and this and this into one file.

231
00:10:57,298 --> 00:10:59,923
This for me to easily visualize what we did, but no

232
00:10:59,928 --> 00:11:02,848
don't do that because, doing this will will affect

233
00:11:02,848 --> 00:11:04,678
other files like the ones I just show shown you.

234
00:11:05,173 --> 00:11:08,653
It'll be iterated over and the commands there will be run as well.

235
00:11:09,313 --> 00:11:13,393
So if you'll do that, create another SQL folder, SQL Dev or

236
00:11:13,393 --> 00:11:16,423
SQL temp, whatever, and then do any changes that you want.

237
00:11:16,423 --> 00:11:19,003
But here in this folder, only increment

238
00:11:19,363 --> 00:11:21,253
do not change the previous only increment.

239
00:11:21,593 --> 00:11:24,088
When I add WhatsApp features I created a new

240
00:11:24,428 --> 00:11:27,378
script with what I want to increment the live save.

241
00:11:28,118 --> 00:11:28,478
Okay.

242
00:11:28,718 --> 00:11:32,088
The other file, which also uses this logic is Python

243
00:11:32,088 --> 00:11:36,708
app, cml, and this is the CICD that what GitHub

244
00:11:36,798 --> 00:11:39,658
action uses when we push any commit to GitHub.

245
00:11:40,258 --> 00:11:43,528
Um, and so we won't go too much detail

246
00:11:43,528 --> 00:11:46,378
here, but I just wanna show you this line.

247
00:11:47,983 --> 00:11:50,023
This line, create the tables by running sq skips.

248
00:11:50,173 --> 00:11:52,393
So it's one of the jobs that that the CICD

249
00:11:52,393 --> 00:11:54,823
pipeline does, is that it creates the tables

250
00:11:55,153 --> 00:11:58,783
by going through a full loop in the SQL file.

251
00:11:59,143 --> 00:12:00,373
So it is a sq l folder.

252
00:12:01,013 --> 00:12:02,783
So this logic is applied twice.

253
00:12:03,153 --> 00:12:06,478
If you want to change this wave of logging or

254
00:12:06,478 --> 00:12:09,618
tracing our how we write sql, then we have to

255
00:12:09,948 --> 00:12:11,448
take into consideration these two files as well.

256
00:12:12,453 --> 00:12:12,753
Okay.

257
00:12:13,293 --> 00:12:18,363
Uh, this is regarding SQL Folder explanations of sql.

258
00:12:18,363 --> 00:12:20,103
I don't think I really need to do that.

259
00:12:20,103 --> 00:12:21,393
Like they are straightforward.

260
00:12:21,873 --> 00:12:24,393
Now you should, that you should be aware or it

261
00:12:24,393 --> 00:12:27,453
should make sense to you why we did a script called

262
00:12:27,453 --> 00:12:30,003
Alter User Tokens with just these alter commands.

263
00:12:30,063 --> 00:12:32,613
Like any newcomer could say, wait, but why don't

264
00:12:32,613 --> 00:12:35,793
we just, uh, do not here, like a drop constraint.

265
00:12:35,823 --> 00:12:37,833
Okay, so why did we put it in the first place?

266
00:12:37,833 --> 00:12:38,433
We can just remove it.

267
00:12:38,868 --> 00:12:39,618
In the first script.

268
00:12:39,978 --> 00:12:40,188
Sorry.

269
00:12:40,528 --> 00:12:42,988
But no, we don't do this because the logic that I just said.

270
00:12:43,318 --> 00:12:44,888
It's we apply things incrementally.

271
00:12:45,498 --> 00:12:47,388
So yeah, I don't think I need to go

272
00:12:47,838 --> 00:12:49,128
in depth of the explanations of here.

273
00:12:49,248 --> 00:12:52,633
There's a nice diagram that I that I created which,

274
00:12:52,633 --> 00:12:54,968
visualizes the schema of the database that we have.

275
00:12:55,518 --> 00:12:56,538
This should be up to date.

276
00:12:57,153 --> 00:12:58,973
Uh, with with what we, what we've done.

277
00:12:58,973 --> 00:13:02,303
Obviously you see here dependencies and triangular depend.

278
00:13:02,363 --> 00:13:04,883
This isn't the best way to model things, but

279
00:13:04,933 --> 00:13:06,433
that's what we have right now and it works.

280
00:13:07,273 --> 00:13:09,383
And, there could be, we could refactor it soon.

281
00:13:10,973 --> 00:13:13,323
but, the way that I did this is optional info by the

282
00:13:13,323 --> 00:13:16,923
way, is using a tool called the DBeaver that I have here.

283
00:13:17,983 --> 00:13:20,463
it's, uh, free and it's, in my opinion,

284
00:13:20,463 --> 00:13:22,293
the best IDE that I used for managing

285
00:13:24,443 --> 00:13:24,683
stuff.

286
00:13:25,613 --> 00:13:27,923
and so there was, just a button to this diagram

287
00:13:27,923 --> 00:13:29,783
automatically, and you can maneuver it around.

288
00:13:29,933 --> 00:13:31,133
There's a lot of solutions online,

289
00:13:31,133 --> 00:13:32,123
but this is the one that I used.

290
00:13:32,783 --> 00:13:34,103
Um, okay.

291
00:13:34,103 --> 00:13:36,503
So that let it open in the backend and take its time.

292
00:13:37,343 --> 00:13:39,383
And for now, I finished the S QL port.

293
00:13:40,193 --> 00:13:42,633
Hopefully I remember to say everything about it.

294
00:13:43,688 --> 00:13:49,988
Okay, so that was finished in nine 50 here and next should

295
00:13:49,988 --> 00:13:52,958
be the source folder, but I'll skip this folder for now

296
00:13:53,208 --> 00:13:56,818
because it's, it has the bulk, the meat of the project.

297
00:13:56,908 --> 00:13:59,698
I will make this, I will let this take its sweet

298
00:13:59,698 --> 00:14:02,368
time and we'll move instead to test folder.

299
00:14:03,298 --> 00:14:06,268
And so this was nine.

300
00:14:06,733 --> 00:14:11,483
So by the way, this is, yeah, this is DBEaver and I, yeah,

301
00:14:11,483 --> 00:14:16,133
because here to create the database, I actually didn't, I didn't

302
00:14:16,233 --> 00:14:19,323
I didn't run the com the file, which is called set database.

303
00:14:19,323 --> 00:14:19,863
I didn't do that.

304
00:14:19,863 --> 00:14:23,988
I actually just pasted, like I took all of the files here.

305
00:14:24,833 --> 00:14:27,863
And just pasted them one below the other and made this naming

306
00:14:27,923 --> 00:14:30,752
like this was the first file . Pasted and this is the second file.

307
00:14:31,142 --> 00:14:34,952
And I didn't just ran all of these and so it's

308
00:14:34,952 --> 00:14:37,652
not the best way to do things, but hey, in world.

309
00:14:38,732 --> 00:14:42,182
Yeah, obviously that was before I knew about the setup stuff.

310
00:14:42,992 --> 00:14:45,752
Okay, so back again to the test folder.

311
00:14:47,852 --> 00:14:50,662
So the test logic, we again, I just came through

312
00:14:50,662 --> 00:14:53,132
this because there isn't really much it's uses.

313
00:14:53,192 --> 00:14:56,702
We are using pytest library here, and in each of the main

314
00:14:56,702 --> 00:15:00,959
files in the repo, you'll see me add like couple of comments,

315
00:15:00,959 --> 00:15:04,039
python comments to explain the overall objective of this file.

316
00:15:04,379 --> 00:15:05,544
Obviously, you don't have to read all this.

317
00:15:06,144 --> 00:15:08,244
If you are one who understands better by reading

318
00:15:08,244 --> 00:15:09,804
the code, then skip that and read the code.

319
00:15:09,954 --> 00:15:13,674
That's why I put it in the start so that all of the big

320
00:15:13,674 --> 00:15:16,884
old comments which explain the overall reason of this

321
00:15:16,884 --> 00:15:18,924
file and what it does and all that, I put it in the start.

322
00:15:18,924 --> 00:15:20,424
Because if you wanna skip that, you can skip that

323
00:15:20,904 --> 00:15:24,504
instead of just putting them amidst the code here.

324
00:15:24,924 --> 00:15:26,844
So what is amidst the code here as

325
00:15:26,844 --> 00:15:29,034
just few lines, not overall logic.

326
00:15:29,034 --> 00:15:31,914
And any technical notes or tricky notes or explanation

327
00:15:31,914 --> 00:15:34,014
for those who don't know, I leave that at the start.

328
00:15:34,694 --> 00:15:37,184
So again, literally from its name, this file aims to test

329
00:15:37,184 --> 00:15:40,354
the main API endpoints of the app, which is this file.

330
00:15:40,354 --> 00:15:42,004
And this is in the source folder.

331
00:15:42,004 --> 00:15:42,964
I'll go to that later.

332
00:15:43,364 --> 00:15:46,059
Using pie test library and first a p discount.

333
00:15:46,569 --> 00:15:47,109
Um.

334
00:15:47,949 --> 00:15:48,759
The steps here.

335
00:15:48,819 --> 00:15:51,549
Literally all of this was like JT generated, is

336
00:15:51,549 --> 00:15:53,799
just, we go through the code here and it just

337
00:15:53,919 --> 00:15:56,019
gives an overview of what we are currently testing.

338
00:15:57,039 --> 00:15:59,339
Oh, there is a disadvantage of this is that whenever we make

339
00:15:59,339 --> 00:16:03,169
changes in the code if we, for example, remove a test entirely,

340
00:16:03,589 --> 00:16:05,599
then we have to remember to remove it from here as well.

341
00:16:06,259 --> 00:16:09,769
So this is also a disadvantage, this method but at least it

342
00:16:09,769 --> 00:16:12,049
decouples the comments a little bit from the rest of the code.

343
00:16:12,514 --> 00:16:15,124
So yeah, like anything else there, there are adventure

344
00:16:15,124 --> 00:16:18,264
and disadvantages, but for now we are leaving this as is.

345
00:16:18,264 --> 00:16:20,814
Maybe in the future we'll make a dedicated documentation file,

346
00:16:21,264 --> 00:16:24,174
which store these all of these comments in all these files.

347
00:16:24,174 --> 00:16:27,804
And we refer, like we can say here refer to

348
00:16:28,014 --> 00:16:31,454
header ethic for this specific info and et cetera.

349
00:16:32,064 --> 00:16:33,114
But for now, we're leaving this.

350
00:16:34,689 --> 00:16:35,139
Okay.

351
00:16:35,229 --> 00:16:36,669
So these are the general steps.

352
00:16:37,209 --> 00:16:40,629
Uh, I really don't think I need to go through them.

353
00:16:40,629 --> 00:16:42,249
If you read them in your time, you understand that.

354
00:16:42,459 --> 00:16:44,409
And literally some of them are too verbose because

355
00:16:44,409 --> 00:16:46,269
again, these are a AI generated, so you have

356
00:16:46,269 --> 00:16:48,219
important, necessary modules and you can see that.

357
00:16:49,509 --> 00:16:51,729
So there are some details that we don't need to go through.

358
00:16:52,159 --> 00:16:53,899
I, while I was making these comments, I was

359
00:16:53,899 --> 00:16:56,909
thinking of what mi like a newcomer who really

360
00:16:56,909 --> 00:16:59,484
don't know the tech stack of what we're using.

361
00:17:00,344 --> 00:17:00,644
need.

362
00:17:00,864 --> 00:17:04,584
For example, if someone doesn't know py test that much, what

363
00:17:04,584 --> 00:17:09,114
can I say here that can help them understand this new tool?

364
00:17:09,654 --> 00:17:12,614
So, When I read the code, because I really wasn't familiar, even

365
00:17:12,614 --> 00:17:15,584
myself, I wasn't familiar with PY test before this recording.

366
00:17:15,974 --> 00:17:18,224
But when I read the code, it's understandable.

367
00:17:18,294 --> 00:17:19,764
Even the naming conventions are clear

368
00:17:19,764 --> 00:17:21,924
and so I know what this test aims to do.

369
00:17:22,219 --> 00:17:23,509
And these are comments saying it.

370
00:17:23,509 --> 00:17:26,029
So there isn't really much do, but for example,

371
00:17:26,479 --> 00:17:28,129
this decorator, I don't understand this.

372
00:17:28,559 --> 00:17:31,259
Another decorator from markers, I didn't understand that as well.

373
00:17:31,679 --> 00:17:35,309
So stuff like this, which I think isn't really understandable

374
00:17:35,339 --> 00:17:38,759
at first glance, even by newcomers, stuff like that.

375
00:17:38,759 --> 00:17:39,659
I put it in comments.

376
00:17:40,029 --> 00:17:41,469
So here I explained, and obviously you can

377
00:17:41,469 --> 00:17:43,059
see websites which explain this as well.

378
00:17:43,059 --> 00:17:44,799
I don't have to put all the explicitly here,

379
00:17:45,369 --> 00:17:47,789
but I try to give a gist of what's happening.

380
00:17:48,239 --> 00:17:49,979
Instead of you seeing websites, which

381
00:17:49,979 --> 00:17:52,169
sometimes overcomplicate explanations.

382
00:17:52,889 --> 00:17:55,559
I'm not going to dive deep into like

383
00:17:55,589 --> 00:17:57,449
technical details of how pie test works.

384
00:17:57,479 --> 00:17:57,989
To be honest.

385
00:17:57,989 --> 00:18:00,419
It's not the aim of this recording, but,

386
00:18:00,419 --> 00:18:03,269
hopefully this main comment block is enough.

387
00:18:03,269 --> 00:18:06,189
And obviously, in these technical notes, I put an optional here.

388
00:18:06,729 --> 00:18:08,889
Uh, or between brackets or anything just to indicate that

389
00:18:09,099 --> 00:18:12,069
this, you can read that if you think that's worth of reading,

390
00:18:12,129 --> 00:18:13,989
but if you know that info already, you don't have to read it.

391
00:18:14,779 --> 00:18:16,579
And normally when I put this note as well in

392
00:18:16,579 --> 00:18:19,549
capitalization, it is probably also a technical note.

393
00:18:20,179 --> 00:18:22,339
Like these are just general steps of what

394
00:18:22,339 --> 00:18:24,589
we're doing here and, why this file is created.

395
00:18:25,069 --> 00:18:27,829
But this is like technicalities, like for example here,

396
00:18:27,829 --> 00:18:30,589
if you didn't understand what is a test client in,

397
00:18:31,069 --> 00:18:33,109
and I'm explaining it here, how it internally works.

398
00:18:33,719 --> 00:18:35,579
So that you know that we're not internally

399
00:18:35,579 --> 00:18:37,379
creating a server, it's just emulating the cre,

400
00:18:37,439 --> 00:18:39,479
the creation of a server that's not creating one.

401
00:18:39,479 --> 00:18:41,729
So maybe that info is useful to you.

402
00:18:42,449 --> 00:18:46,609
Yeah, this is, I think enough for the testing file here.

403
00:18:47,009 --> 00:18:48,679
Is another one, for the quality.

404
00:18:48,709 --> 00:18:52,189
This one specifically is just to see that the responses

405
00:18:52,189 --> 00:18:54,559
from the model that we use is currently T four oh.

406
00:18:54,979 --> 00:18:56,429
Is good enough?

407
00:18:56,489 --> 00:18:57,419
It's good enough.

408
00:18:57,449 --> 00:18:58,679
How do we decide good enough?

409
00:18:59,189 --> 00:19:01,949
Uh, it's based on me on data sets that we have.

410
00:19:02,489 --> 00:19:05,509
So, For example, we ask it a question here and,

411
00:19:05,519 --> 00:19:08,129
based on, and give it some options here, separated

412
00:19:08,129 --> 00:19:10,589
by comments and give it the correct answer.

413
00:19:11,189 --> 00:19:15,749
And so in distance test and quality file, we take

414
00:19:15,749 --> 00:19:20,289
this CSV for example, and, we split the, columns here.

415
00:19:20,559 --> 00:19:23,499
We give it the questions initially and we give it

416
00:19:23,499 --> 00:19:27,129
the options, and we tell the LLM to answer based

417
00:19:27,129 --> 00:19:28,869
on the solution that we made here in the project.

418
00:19:29,439 --> 00:19:32,919
And so if it answers correctly, uh, we see how many questions

419
00:19:32,919 --> 00:19:35,349
answer correctly, and based on that, we give it the score.

420
00:19:36,159 --> 00:19:37,479
Obviously, the more data dataset we have, the

421
00:19:37,479 --> 00:19:39,699
better, and we have a dedicated deficit for this.

422
00:19:39,699 --> 00:19:40,029
I believe.

423
00:19:40,269 --> 00:19:41,769
Like I, I think there are other data sets

424
00:19:41,769 --> 00:19:45,129
that we tested on if you go to, I'm sorry.

425
00:19:45,144 --> 00:19:45,434
Okay.

426
00:19:46,609 --> 00:19:52,729
Project itself, it's itself Here, you'll see

427
00:19:54,029 --> 00:19:56,639
I'm sorry that this says, yeah, there is here

428
00:19:57,089 --> 00:19:59,399
the, we just gave this 12 months ago, I believe.

429
00:19:59,399 --> 00:20:00,359
Yes, five months ago.

430
00:20:00,839 --> 00:20:03,599
And I'm not sure if the other data is here.

431
00:20:03,599 --> 00:20:05,219
We use it in the code right now, but

432
00:20:05,219 --> 00:20:06,779
CSV one is the main one that we use.

433
00:20:07,499 --> 00:20:08,859
This is also for you to know if you.

434
00:20:09,239 --> 00:20:12,594
We would like to contribute, um, in the evaluation part.

435
00:20:13,554 --> 00:20:15,504
This file, I might explain it.

436
00:20:15,684 --> 00:20:16,944
This file is called, jinja template.

437
00:20:16,964 --> 00:20:17,804
Syntax is

438
00:20:20,804 --> 00:20:24,634
and, the test files here use this formatting, but replaces the

439
00:20:24,634 --> 00:20:28,534
question and options, uh, with what we have from the CSV here.

440
00:20:29,179 --> 00:20:29,749
So, Okay.

441
00:20:29,749 --> 00:20:31,344
So how do we find something like this?

442
00:20:31,349 --> 00:20:33,409
This is actually a good test for what I explained

443
00:20:33,409 --> 00:20:35,899
to you previously about the control shift F part.

444
00:20:36,259 --> 00:20:37,939
So if, for example, say you're a newcomer to the

445
00:20:37,939 --> 00:20:40,909
project and you wanna see how is this file used?

446
00:20:40,999 --> 00:20:41,329
Okay?

447
00:20:41,659 --> 00:20:45,139
Might control p to see the available pages with this name to

448
00:20:45,139 --> 00:20:48,319
ask question, and you will not see anything except this file.

449
00:20:48,334 --> 00:20:48,684
Okay.

450
00:20:49,539 --> 00:20:50,019
Good enough.

451
00:20:50,049 --> 00:20:50,829
This will not work.

452
00:20:50,979 --> 00:20:52,839
Let me try control shift f This will

453
00:20:52,839 --> 00:20:54,679
save the content of the of the files.

454
00:20:55,129 --> 00:20:57,369
And see, where is this name mentioned?

455
00:20:57,849 --> 00:21:02,979
So if I say, ask a question, okay, I do.

456
00:21:03,009 --> 00:21:04,764
I find it here.

457
00:21:05,879 --> 00:21:09,144
I find it here, which is the disc and quality.

458
00:21:09,144 --> 00:21:12,879
So that's actually how I myself knew that before doing this video.

459
00:21:13,319 --> 00:21:14,249
And we see that it's used here.

460
00:21:14,939 --> 00:21:17,949
And we see that it uses tn which is based on

461
00:21:17,949 --> 00:21:19,779
jinja here the thing that I told you about.

462
00:21:20,199 --> 00:21:22,149
And so it, it reads the question, the template

463
00:21:22,149 --> 00:21:25,609
from here and based on it splits it from the CSV.

464
00:21:26,149 --> 00:21:29,779
Uh, so it is this tool, this shortcut

465
00:21:29,779 --> 00:21:31,339
control shift F is very useful.

466
00:21:31,339 --> 00:21:32,479
The global search feature.

467
00:21:33,049 --> 00:21:36,949
Um, this is something tricky note though.

468
00:21:37,219 --> 00:21:38,659
I actually searched with underscore

469
00:21:38,659 --> 00:21:40,339
here, even though the file's name is.

470
00:21:40,704 --> 00:21:42,544
Ask question with a dash.

471
00:21:42,904 --> 00:21:45,454
So if we do this here, we actually will not find it.

472
00:21:45,754 --> 00:21:46,354
We won't find it.

473
00:21:46,844 --> 00:21:48,854
We'll only find here in, in a do egg file.

474
00:21:48,914 --> 00:21:51,184
This this is, this file isn't necessary

475
00:21:51,184 --> 00:21:52,924
and I won't go into this explanation.

476
00:21:53,134 --> 00:21:55,384
It's actually auto originated, is useful for us.

477
00:21:55,384 --> 00:21:58,894
So ignore any dot egg files, their uses for us.

478
00:21:59,314 --> 00:22:01,669
If you do that with Dash, like it's naming here, we won't see.

479
00:22:02,269 --> 00:22:04,999
And this is a slightly tricky part about the global

480
00:22:04,999 --> 00:22:08,619
search method of finding things is that sometimes

481
00:22:08,619 --> 00:22:10,479
you'll have to take some things of what you want

482
00:22:10,479 --> 00:22:12,879
to search about and hope it matches with something.

483
00:22:13,509 --> 00:22:16,329
Um, Sometimes it's the case and sometimes it's not.

484
00:22:16,719 --> 00:22:18,909
Again, you don't have to always do this solution.

485
00:22:18,909 --> 00:22:21,439
Like it just depends on what you're trying to search.

486
00:22:21,509 --> 00:22:23,949
Because I'm searching for a name here for a question here.

487
00:22:24,309 --> 00:22:25,569
Then obviously vs.

488
00:22:25,569 --> 00:22:26,349
Code won't help me.

489
00:22:26,439 --> 00:22:27,129
Like vs.

490
00:22:27,129 --> 00:22:30,474
Code won't give me what's referencing like it I

491
00:22:30,474 --> 00:22:33,414
can't control click this and see previous references.

492
00:22:34,104 --> 00:22:37,044
Uh, but in something like data here I can do that.

493
00:22:37,044 --> 00:22:39,744
So if I control click data, I can see

494
00:22:39,744 --> 00:22:41,454
what it was mentioned in this file.

495
00:22:41,994 --> 00:22:42,924
So it was mentioned here.

496
00:22:42,924 --> 00:22:44,564
So test, I'm sorry, agent relies on

497
00:22:44,564 --> 00:22:46,424
the data function to get the data here.

498
00:22:46,479 --> 00:22:46,719
Yeah.

499
00:22:46,719 --> 00:22:48,699
So the control shift f is very useful

500
00:22:48,789 --> 00:22:51,129
when it's tricky to use symbols.

501
00:22:51,489 --> 00:22:51,759
Okay.

502
00:22:51,859 --> 00:22:54,899
To rely on symbols that vs code can can reference for you.

503
00:22:55,799 --> 00:22:56,219
Okay.

504
00:22:56,489 --> 00:22:58,639
I'm sorry, I went a little off topic here, but because

505
00:22:59,209 --> 00:23:02,749
we really should see the fun, the features of your

506
00:23:02,829 --> 00:23:05,499
id because it'll really help you down the road.

507
00:23:06,199 --> 00:23:08,889
So yeah, I think I finished the test spot.

508
00:23:09,459 --> 00:23:09,819
Yeah.

509
00:23:10,704 --> 00:23:11,624
And yeah.

510
00:23:11,624 --> 00:23:12,834
And now I believe I finished the

511
00:23:12,834 --> 00:23:14,334
folders, the explanations of the folders.

512
00:23:14,994 --> 00:23:15,834
So these are all the folders.

513
00:23:15,834 --> 00:23:17,514
O obviously I'm leaving source for the end.

514
00:23:18,204 --> 00:23:20,214
This is the hierarchy of how we're working.

515
00:23:20,214 --> 00:23:23,304
Obviously the, those vs code file is just a, an internal

516
00:23:23,304 --> 00:23:26,254
folder that have the sittings based on VSCode here.

517
00:23:27,134 --> 00:23:29,634
I can I, I am the one who wrote these files.

518
00:23:29,634 --> 00:23:31,764
These are in the GIT ignored file.

519
00:23:32,184 --> 00:23:35,454
So I here put extra settings that I find useful for me.

520
00:23:35,964 --> 00:23:38,994
Uh, but you don't have to follow the rule and

521
00:23:38,994 --> 00:23:41,004
I will not explain what these things do because

522
00:23:41,004 --> 00:23:42,894
that's out of the scope, but you don't need them.

523
00:23:42,984 --> 00:23:44,844
If you don't want them, you will not need them.

524
00:23:45,744 --> 00:23:48,984
So yeah this, I really shouldn't explain this.

525
00:23:49,764 --> 00:23:52,944
And yeah, here we finished with the purpose of reus

526
00:23:52,944 --> 00:23:56,064
folders and now I'll explain the purpose of root files.

527
00:23:56,949 --> 00:24:01,359
So we start this on oh, 10.

528
00:24:01,359 --> 00:24:02,169
10. Ah,

529
00:24:04,479 --> 00:24:06,849
hopefully you are not bored by now.

530
00:24:07,819 --> 00:24:08,059
Okay.

531
00:24:08,059 --> 00:24:09,289
So the purpose of root files.

532
00:24:10,579 --> 00:24:12,439
So before going to source, I will

533
00:24:12,439 --> 00:24:14,089
explain the root files over here.

534
00:24:14,659 --> 00:24:20,299
Um, explain some of them at least with the order that I have here.

535
00:24:20,389 --> 00:24:22,879
I will skip end of example for the end.

536
00:24:23,629 --> 00:24:25,039
Because it's, that's the most important one.

537
00:24:25,104 --> 00:24:30,444
And it's heavily tied with source folder, the dot Python version.

538
00:24:30,444 --> 00:24:31,704
Okay, this is a tricky one.

539
00:24:33,114 --> 00:24:35,784
Previously, if you see any previous commits, you will see that

540
00:24:35,784 --> 00:24:39,684
this file was called runtime dot text, but we changed that.

541
00:24:39,924 --> 00:24:41,004
Why did we change this?

542
00:24:41,844 --> 00:24:43,074
Because of the following.

543
00:24:43,734 --> 00:24:46,044
These are really extra info, but it

544
00:24:46,044 --> 00:24:47,334
may help you as well in other projects.

545
00:24:47,334 --> 00:24:48,144
So why not?

546
00:24:48,764 --> 00:24:49,934
We are using Heroku.

547
00:24:50,444 --> 00:24:55,374
Uh, Heroku server, a Heroku service to deploy our server to that

548
00:24:55,374 --> 00:24:58,764
platform in order for it to appear to all the users that we have.

549
00:24:59,244 --> 00:25:02,424
Heroku has some guidelines and some

550
00:25:02,474 --> 00:25:04,424
announcements that come every now and then.

551
00:25:04,964 --> 00:25:06,584
One of these announcements is that

552
00:25:06,644 --> 00:25:08,804
the runtime text file is duplicated.

553
00:25:09,014 --> 00:25:11,204
What the heck is a runtime to text file?

554
00:25:12,014 --> 00:25:12,969
Runtime to text file?

555
00:25:13,304 --> 00:25:14,999
Let me see if they're actually explaining it here.

556
00:25:15,479 --> 00:25:15,489
Informations.

557
00:25:16,884 --> 00:25:17,094
Okay.

558
00:25:17,094 --> 00:25:20,514
So basically it tells platforms like these, like Heroku.

559
00:25:20,994 --> 00:25:23,004
What is the Python version that you're currently running?

560
00:25:23,754 --> 00:25:23,934
It?

561
00:25:24,114 --> 00:25:25,224
This is basically what it does.

562
00:25:25,734 --> 00:25:29,164
So, If you see here we have it, we were running

563
00:25:29,164 --> 00:25:31,834
this, but this is for the server like this.

564
00:25:31,834 --> 00:25:34,974
The server of Heroku, which will host

565
00:25:35,064 --> 00:25:37,794
the application should run on this.

566
00:25:38,094 --> 00:25:40,074
This is what I understand, but I'm not sure about this though.

567
00:25:40,734 --> 00:25:41,334
Uh.

568
00:25:41,919 --> 00:25:43,969
Or maybe this refers to the actual application

569
00:25:43,969 --> 00:25:45,979
that we have itself, it run on three point 13.

570
00:25:46,619 --> 00:25:47,729
Maybe this is the case as well.

571
00:25:48,439 --> 00:25:50,059
I, even myself, I need to recheck this.

572
00:25:50,399 --> 00:25:51,839
Essentially it's just a configuration that

573
00:25:51,839 --> 00:25:53,759
tells Heroku which Python version to run.

574
00:25:54,209 --> 00:25:54,479
Okay.

575
00:25:55,049 --> 00:25:56,969
And, It was previously called runtime to

576
00:25:56,969 --> 00:25:59,519
text, but we, but they decided to change this.

577
00:25:59,519 --> 00:26:01,349
And this is actually new news.

578
00:26:01,889 --> 00:26:04,719
Uh, And the effective change will be on 6th of February.

579
00:26:05,319 --> 00:26:07,329
Yeah, as you can see, we should have changed it.

580
00:26:07,689 --> 00:26:10,659
And so I did, even before this recording, two Python version,

581
00:26:10,719 --> 00:26:14,394
they are the ones who suggested this suggested, so they

582
00:26:14,394 --> 00:26:17,694
said, here we should make it a do Python version file.

583
00:26:17,749 --> 00:26:19,069
And this makes more sense to be honest,

584
00:26:19,069 --> 00:26:20,899
because that's literally its objective.

585
00:26:20,899 --> 00:26:22,339
It's just to tell the Python version.

586
00:26:22,644 --> 00:26:25,444
So it makes sense to, to enable this, okay.

587
00:26:25,444 --> 00:26:27,664
So this is the use of this file.

588
00:26:28,144 --> 00:26:30,334
This literally shouldn't have taken me more than a minute,

589
00:26:30,334 --> 00:26:32,434
but I don't know why I took a long time explaining it.

590
00:26:33,064 --> 00:26:35,674
Uh, There is also a profile here.

591
00:26:35,674 --> 00:26:37,054
This is also used by Heroku.

592
00:26:37,544 --> 00:26:39,764
In order to, okay.

593
00:26:40,494 --> 00:26:44,304
I wanna explain this, Just rather than I explain it and,

594
00:26:44,304 --> 00:26:46,549
missing any important detail, I will literally just.

595
00:26:47,304 --> 00:26:49,404
Say the, it's exact use in front of you.

596
00:26:49,464 --> 00:26:51,294
This is the best article that I found explaining it.

597
00:26:51,624 --> 00:26:53,994
This one, it's literally just a starting

598
00:26:53,994 --> 00:26:55,524
point for any app running on hero.

599
00:26:56,094 --> 00:26:58,504
So, Where you declare one or more processes

600
00:26:58,534 --> 00:27:00,484
to be run for your app to function.

601
00:27:01,144 --> 00:27:07,204
So we first run the commands here before our application starts.

602
00:27:07,414 --> 00:27:09,194
Our service starts in the deployed HEROs.

603
00:27:09,194 --> 00:27:09,704
Okay.

604
00:27:10,834 --> 00:27:13,264
So for example, you, we can say the

605
00:27:13,264 --> 00:27:15,124
following, what are the commands?

606
00:27:15,514 --> 00:27:17,974
What are the processes that we need to

607
00:27:17,974 --> 00:27:20,404
initialize before we start turning our server?

608
00:27:20,914 --> 00:27:24,354
Okay, so this is an example, just echo example.

609
00:27:24,804 --> 00:27:26,564
So if you see here, just, let me to

610
00:27:26,564 --> 00:27:29,214
mean each one here just writes an echo.

611
00:27:29,434 --> 00:27:30,154
If you run.

612
00:27:30,544 --> 00:27:33,094
This profile you'll see in the console, in the

613
00:27:33,094 --> 00:27:37,324
logs of the Heroku environment, uh, website.

614
00:27:37,694 --> 00:27:40,094
You'll see in their logs something like this.

615
00:27:40,374 --> 00:27:42,594
Echo spinning up the web process, which is this one.

616
00:27:42,804 --> 00:27:43,914
And the normal works of booting,

617
00:27:43,914 --> 00:27:45,024
which is this one and this search.

618
00:27:45,534 --> 00:27:48,304
So, Here we're using only web, I believe.

619
00:27:48,454 --> 00:27:48,964
Recommend.

620
00:27:49,264 --> 00:27:49,504
Yes.

621
00:27:49,624 --> 00:27:49,954
Web here.

622
00:27:50,464 --> 00:27:51,454
And we're passing these.

623
00:27:51,784 --> 00:27:53,314
So what are we saying here?

624
00:27:53,524 --> 00:27:56,494
We're basically saying we want the Python path to be this.

625
00:27:57,049 --> 00:28:00,409
Uh, which is the current Python path, the variable that

626
00:28:00,409 --> 00:28:02,839
we have, object that we have in the environment, and

627
00:28:02,839 --> 00:28:05,149
source to put the source folder, which is this one.

628
00:28:05,659 --> 00:28:08,059
So to put source in the Python path,

629
00:28:08,179 --> 00:28:09,679
this is what I understand from this.

630
00:28:10,159 --> 00:28:12,929
For us, if we make imports and et cetera in the

631
00:28:12,929 --> 00:28:15,629
main Python files, it'll, it'll be understood.

632
00:28:15,719 --> 00:28:17,519
Like they'll understand what source is.

633
00:28:18,029 --> 00:28:18,269
Okay.

634
00:28:18,689 --> 00:28:22,099
And to use a unicorn server number of workers is for,

635
00:28:22,099 --> 00:28:25,229
I don't really need to go into depth with but this

636
00:28:25,229 --> 00:28:30,249
is just saying to Heroku how we should configure the

637
00:28:30,249 --> 00:28:33,429
environment variables and the infrastructure of the

638
00:28:33,429 --> 00:28:35,829
server, which is running our deployed application.

639
00:28:36,219 --> 00:28:36,519
Okay.

640
00:28:37,149 --> 00:28:39,939
Um, and any extra configurations for.

641
00:28:40,554 --> 00:28:41,814
So this is the use of this file.

642
00:28:41,854 --> 00:28:43,894
We don't, we rarely touch this file, so

643
00:28:44,734 --> 00:28:46,744
a brief explanation of it is sufficient.

644
00:28:47,534 --> 00:28:50,557
Then we have l file over here.

645
00:28:53,067 --> 00:28:56,897
this contains configurations for the, overall project.

646
00:28:57,317 --> 00:28:59,237
There are a lot of, documents online explaining,

647
00:28:59,667 --> 00:29:01,902
what you can achieve with a by project to two five.

648
00:29:02,652 --> 00:29:04,452
So I won't really go into depth here.

649
00:29:04,512 --> 00:29:06,812
And there are info that you can, you can

650
00:29:08,042 --> 00:29:09,732
just even without reading something online.

651
00:29:09,782 --> 00:29:10,532
You can deduce that.

652
00:29:10,532 --> 00:29:14,732
Okay, this is the file that, allows me to put metadata regarding

653
00:29:14,942 --> 00:29:17,372
the project, like this one page and documentation, et cetera.

654
00:29:18,142 --> 00:29:21,902
But what I want to explain out of all of this is this part.

655
00:29:22,292 --> 00:29:24,982
So we are using a linker called ruff.

656
00:29:26,007 --> 00:29:26,967
What is the link here?

657
00:29:27,267 --> 00:29:29,127
It's basically when we're writing code,

658
00:29:29,157 --> 00:29:31,047
we want to abide by certain practices.

659
00:29:31,647 --> 00:29:34,257
And so which practices do we abide by?

660
00:29:35,217 --> 00:29:38,517
Are a lot of options online, a lot of guides, a lot of guidelines.

661
00:29:39,027 --> 00:29:41,767
Uh, so we use guidelines related to ruff.

662
00:29:42,327 --> 00:29:42,627
Okay.

663
00:29:42,687 --> 00:29:44,787
So even if I, 'cause to be honest, I don't

664
00:29:44,787 --> 00:29:48,357
really know how to, say its exact definition.

665
00:29:48,407 --> 00:29:49,907
I will not get anything.

666
00:29:49,937 --> 00:29:50,267
Okay.

667
00:29:50,417 --> 00:29:54,467
Now I want the tool, I want the tool for this.

668
00:29:54,887 --> 00:29:55,097
Yeah.

669
00:29:55,097 --> 00:29:58,067
A static code analysis tool designed specifically for Python.

670
00:29:58,307 --> 00:29:58,607
Okay.

671
00:29:58,977 --> 00:30:00,207
And we are using it, yeah.

672
00:30:00,387 --> 00:30:02,067
Again, for speed and efficiency.

673
00:30:02,337 --> 00:30:06,387
So when we get ruff here and we install it here, it'll efficiently

674
00:30:06,417 --> 00:30:10,887
and quickly scan the code that we're writing and say that, wait,

675
00:30:10,947 --> 00:30:13,557
you are not following our guidelines in this specific principle.

676
00:30:14,247 --> 00:30:15,267
What are their guidelines?

677
00:30:15,777 --> 00:30:18,867
One of them is, for example, that we have put here in this

678
00:30:18,867 --> 00:30:22,287
repo, is that we can't exceed a certain amount of characters

679
00:30:22,497 --> 00:30:25,287
in our repository, in our entire repo in a certain line.

680
00:30:25,797 --> 00:30:28,827
So each line would have a maximum of,

681
00:30:29,307 --> 00:30:31,887
if you point here, 1, 2, 7 characters.

682
00:30:32,337 --> 00:30:32,607
Okay?

683
00:30:32,787 --> 00:30:36,727
So here you see an issue code line to long because it has 141

684
00:30:36,727 --> 00:30:39,352
characters and you're only allowed to have a maximum of 127.

685
00:30:40,162 --> 00:30:40,372
Okay.

686
00:30:40,492 --> 00:30:43,102
And it's saying what the guideline is, like

687
00:30:43,132 --> 00:30:45,532
this is a guideline ID, which specified this.

688
00:30:45,532 --> 00:30:47,872
I, so if you open this it'll expand it here.

689
00:30:48,502 --> 00:30:48,712
Okay.

690
00:30:49,612 --> 00:30:51,567
The preview pens of the ID are really

691
00:30:51,567 --> 00:30:53,997
important, so it'll help you out a lot.

692
00:30:54,327 --> 00:30:57,147
So here it explained it, or it does checks for lines.

693
00:30:57,177 --> 00:30:58,587
It exceeds specific maximum character

694
00:30:58,587 --> 00:31:00,567
length, so you understand it now.

695
00:31:00,927 --> 00:31:02,907
So an important remark about this

696
00:31:03,327 --> 00:31:06,927
is that in the CICD pipeline, we.

697
00:31:08,292 --> 00:31:08,922
Stop.

698
00:31:09,172 --> 00:31:11,662
We, we say that the job failed and that the

699
00:31:11,662 --> 00:31:13,462
code that you're trying to push to our project

700
00:31:13,822 --> 00:31:17,082
failed if it doesn't meet the guidelines of ruff.

701
00:31:18,412 --> 00:31:20,782
Because some repos don't put that hard deadline.

702
00:31:20,782 --> 00:31:22,662
No, we put that, that, not deadline, sorry.

703
00:31:22,962 --> 00:31:24,987
That, that, defining line, like a strict

704
00:31:24,987 --> 00:31:26,877
defining line of how to write code.

705
00:31:27,477 --> 00:31:28,617
We have strict rules here.

706
00:31:28,947 --> 00:31:29,277
Okay.

707
00:31:29,277 --> 00:31:30,357
What define this rule?

708
00:31:30,387 --> 00:31:31,917
Like how do you know these rules?

709
00:31:32,307 --> 00:31:35,007
In the by project file?

710
00:31:35,457 --> 00:31:37,887
So here you'll see line length is 127.

711
00:31:38,427 --> 00:31:38,817
Okay.

712
00:31:39,197 --> 00:31:41,207
So if I change this to 130 for example,

713
00:31:41,567 --> 00:31:43,277
then I can add here three more characters.

714
00:31:43,667 --> 00:31:43,997
Wow.

715
00:31:44,047 --> 00:31:47,767
Are, uh, some other, stuff that we also add as, guidelines here.

716
00:31:48,167 --> 00:31:49,757
And there are guidelines that we ignore.

717
00:31:50,157 --> 00:31:53,997
For example, the, if we put in the list here, these

718
00:31:53,997 --> 00:31:55,587
guidelines, which again, you can see a list of

719
00:31:55,587 --> 00:31:58,977
guidelines in the official website to, to see which Id

720
00:31:59,127 --> 00:32:01,407
you should put for which logic that you want to ignore.

721
00:32:01,457 --> 00:32:02,477
This list will be ignored.

722
00:32:02,957 --> 00:32:05,107
For example, this, guideline says

723
00:32:05,107 --> 00:32:06,382
that for any function that you make.

724
00:32:07,042 --> 00:32:08,992
You should add doc strings like documentation.

725
00:32:09,292 --> 00:32:09,502
Okay.

726
00:32:09,557 --> 00:32:10,337
If I recall correctly.

727
00:32:11,027 --> 00:32:13,547
And, And so putting it here in the ignore

728
00:32:13,667 --> 00:32:15,797
means that no, we can have some functions.

729
00:32:16,247 --> 00:32:17,117
Let me actually remove this.

730
00:32:17,417 --> 00:32:19,367
We can have some functions like this one

731
00:32:19,367 --> 00:32:21,167
actually, which doesn't have a doc ring.

732
00:32:21,617 --> 00:32:21,857
Okay.

733
00:32:22,127 --> 00:32:23,897
Which doesn have a dock string like this,

734
00:32:23,897 --> 00:32:25,037
which explains what the function does.

735
00:32:25,697 --> 00:32:28,907
And so these are other stuff that we ignore.

736
00:32:29,447 --> 00:32:29,777
Okay.

737
00:32:30,287 --> 00:32:31,787
And you can continue on the, with the list.

738
00:32:32,147 --> 00:32:32,387
Okay.

739
00:32:32,387 --> 00:32:33,197
But what do we have?

740
00:32:33,197 --> 00:32:34,277
What if you have an exception?

741
00:32:34,277 --> 00:32:36,707
What if you, for some reason we want this specific

742
00:32:36,707 --> 00:32:40,577
comment to exceed the, or bypass this guideline.

743
00:32:40,997 --> 00:32:45,107
We point here and in the quick fixes disable for this line, which

744
00:32:45,107 --> 00:32:48,717
we put this, putting this will make mayr when it checks the code.

745
00:32:49,167 --> 00:32:51,207
When it passes by this line, it'll say,

746
00:32:51,207 --> 00:32:52,977
okay, so this line is an exception.

747
00:32:52,977 --> 00:32:55,917
So I will not run my analysis on the line for this guideline.

748
00:32:56,042 --> 00:32:56,332
Okay.

749
00:32:57,132 --> 00:33:01,432
So this is also an important thing to remark because

750
00:33:01,432 --> 00:33:04,912
I think we used this in, in, in the new QE research.

751
00:33:04,972 --> 00:33:05,992
Yeah, we used it here.

752
00:33:06,592 --> 00:33:08,752
So this actually failed with me in a previous

753
00:33:08,752 --> 00:33:11,442
commit where we had an issue in the live server

754
00:33:11,442 --> 00:33:13,832
where where this specific clause didn't work.

755
00:33:14,162 --> 00:33:15,392
And so we commented out here.

756
00:33:15,782 --> 00:33:19,082
So when we commented out here, you will see if I un

757
00:33:19,082 --> 00:33:22,472
comment, if I un comment this, you will see this.

758
00:33:23,072 --> 00:33:27,282
Wiggly is squiggly yellow underline saying that, is assigned.

759
00:33:27,342 --> 00:33:28,872
This variable is assigned but never used.

760
00:33:29,022 --> 00:33:31,092
This is a rough guideline that we just broke

761
00:33:31,332 --> 00:33:33,522
right here, and it's, this is, it's hyperlink.

762
00:33:33,972 --> 00:33:39,042
And so if we deploy this right now as is to GitHub, it'll fail the

763
00:33:39,042 --> 00:33:43,992
CICD, which I showed you previously in here in the Python piano.

764
00:33:44,892 --> 00:33:45,432
Remember that?

765
00:33:45,492 --> 00:33:45,702
Yeah.

766
00:33:46,032 --> 00:33:47,932
We have another one right below it about the

767
00:33:48,262 --> 00:33:50,302
linting Stop the build if there are lint errors.

768
00:33:51,112 --> 00:33:53,302
So it checks, it does a rough check command

769
00:33:53,782 --> 00:33:55,822
based on the applied project to file.

770
00:33:56,602 --> 00:33:59,967
Just I showed you and, makes the output compatible to GitHub,

771
00:34:00,192 --> 00:34:02,412
to, to show on the GitHub actions as I'll show you later.

772
00:34:02,922 --> 00:34:03,222
Okay.

773
00:34:03,562 --> 00:34:04,432
So yeah, this failed.

774
00:34:04,522 --> 00:34:06,772
This actually failed on life on the main branch.

775
00:34:07,532 --> 00:34:10,232
That quick and easy fix for this is to either

776
00:34:10,232 --> 00:34:12,332
remove this entirety and move this entirety.

777
00:34:12,362 --> 00:34:13,832
And I do not wanna do that because we

778
00:34:13,832 --> 00:34:15,872
want to return that when we fix things.

779
00:34:16,412 --> 00:34:19,352
Or I can simply put this new qi.

780
00:34:19,982 --> 00:34:20,192
Okay.

781
00:34:20,912 --> 00:34:22,002
Put this no check.

782
00:34:22,572 --> 00:34:26,062
And, Again, highlight, quick fix and disable for this time.

783
00:34:26,092 --> 00:34:26,122
Okay.

784
00:34:28,072 --> 00:34:28,342
Okay.

785
00:34:29,002 --> 00:34:31,132
Uh, what else do we have?

786
00:34:31,132 --> 00:34:32,602
This is for the pipe project tool.

787
00:34:32,912 --> 00:34:34,852
One final thing regarding ruff, you can get

788
00:34:34,852 --> 00:34:37,992
the VSCode extension here because again, these

789
00:34:37,992 --> 00:34:39,842
squiggly lines, how do they appear to me?

790
00:34:40,322 --> 00:34:42,542
They appear because I installed here in extension vs.

791
00:34:42,542 --> 00:34:44,192
Code, code graph.

792
00:34:46,232 --> 00:34:46,832
Wait for it.

793
00:34:48,242 --> 00:34:48,957
It'll appear here.

794
00:34:49,082 --> 00:34:49,472
Okay.

795
00:34:49,502 --> 00:34:51,002
Yes, it's okay.

796
00:34:51,252 --> 00:34:54,732
You should insert and you should have it activated and one way.

797
00:34:55,332 --> 00:34:57,702
To see this, that it's activated, is that

798
00:34:57,752 --> 00:35:01,182
you can see is it because I'm zoomed in?

799
00:35:01,422 --> 00:35:02,592
You can see it one second.

800
00:35:02,592 --> 00:35:04,002
If I zoom back.

801
00:35:04,032 --> 00:35:04,332
Yeah.

802
00:35:04,602 --> 00:35:07,572
You can see here in this part, if you highlight

803
00:35:07,572 --> 00:35:10,062
here, you can see that ruff is working here.

804
00:35:10,812 --> 00:35:11,052
Okay.

805
00:35:11,052 --> 00:35:11,712
It's log to make sure it's working.

806
00:35:12,042 --> 00:35:13,602
I'm saying this because sometimes it doesn't

807
00:35:13,602 --> 00:35:16,932
work and I will not say when these times are.

808
00:35:17,082 --> 00:35:19,962
I will just point you to an issue that I made.

809
00:35:20,037 --> 00:35:21,717
I actually don't have a sink now.

810
00:35:21,717 --> 00:35:25,677
So either way, these source can be beneficial because if is not

811
00:35:25,677 --> 00:35:28,737
working, then you will struggle a little bit in this project

812
00:35:28,857 --> 00:35:33,857
because if you accidentally bypass or don't abide by one of

813
00:35:33,857 --> 00:35:36,482
the guidelines of ruff, and then you commit and then you push.

814
00:35:37,127 --> 00:35:40,507
You'll be surprised with a GitHub action saying that no,

815
00:35:40,597 --> 00:35:42,637
the job failed because they didn't abide by the rules.

816
00:35:43,237 --> 00:35:45,817
So obviously it's better for you to know them in

817
00:35:45,817 --> 00:35:47,592
advance before committing and pushing to GitHub.

818
00:35:48,852 --> 00:35:50,232
So this extension is important.

819
00:35:50,862 --> 00:35:50,952
Okay?

820
00:35:50,952 --> 00:35:53,952
So if it doesn't work, then you know where to go here, and you

821
00:35:53,982 --> 00:35:59,187
normally open up an issue in the ruff um, repo on GitHub and.

822
00:35:59,832 --> 00:36:01,632
State to the developers the issue that

823
00:36:01,632 --> 00:36:03,432
you faced and these docs here, right here.

824
00:36:04,152 --> 00:36:04,362
Yeah.

825
00:36:04,602 --> 00:36:06,612
But hopefully you've not encountered this issue.

826
00:36:07,482 --> 00:36:08,202
It really happens.

827
00:36:08,802 --> 00:36:11,772
So this is all I wanna say regarding the BI project tool file.

828
00:36:11,772 --> 00:36:16,752
And ruff, I believe I don't have anything else to say in it.

829
00:36:16,932 --> 00:36:19,212
These are all specifications you can eat

830
00:36:19,212 --> 00:36:21,272
about them in your own in your own time.

831
00:36:21,842 --> 00:36:24,282
But you really don't really even need to understand all of them.

832
00:36:24,282 --> 00:36:26,982
It's just whenever you break one of the rules, you

833
00:36:26,982 --> 00:36:29,402
will see an indicator that says that you broke them.

834
00:36:29,612 --> 00:36:30,332
And vs.

835
00:36:30,332 --> 00:36:35,232
Code, God knows vs code really really shows that three.

836
00:36:35,502 --> 00:36:37,422
So if you did that, that the entire file

837
00:36:37,422 --> 00:36:39,132
here is marked in yellow and yellow here.

838
00:36:39,132 --> 00:36:41,442
And even this port, if you can see the

839
00:36:41,652 --> 00:36:44,337
screen like this port in the right.

840
00:36:45,092 --> 00:36:47,272
That has a mini map of the of the code.

841
00:36:47,272 --> 00:36:49,252
It'll show you the line which have the issue.

842
00:36:49,302 --> 00:36:50,652
You can point it here and you can see that.

843
00:36:51,252 --> 00:36:51,682
You'll You'll know.

844
00:36:53,002 --> 00:36:53,842
So don't worry about that.

845
00:36:54,742 --> 00:36:58,252
This is all related to the Point project.

846
00:36:58,252 --> 00:37:00,502
I'm sorry that I took a long time in this,

847
00:37:01,222 --> 00:37:03,862
but hopefully it's clear for you now.

848
00:37:04,765 --> 00:37:07,195
The file.

849
00:37:07,375 --> 00:37:07,885
Okay.

850
00:37:08,935 --> 00:37:12,895
So we have next, where was it actually?

851
00:37:12,895 --> 00:37:18,115
I don't, I can't see it here, so I will use my trustee shortcut.

852
00:37:20,665 --> 00:37:20,965
Yeah.

853
00:37:20,965 --> 00:37:21,385
Okay.

854
00:37:22,495 --> 00:37:22,795
Okay.

855
00:37:22,795 --> 00:37:25,145
I will I can redirect you after this video, in

856
00:37:25,145 --> 00:37:27,635
the video description or whatever to resources

857
00:37:27,635 --> 00:37:29,135
for understanding the usage of this file.

858
00:37:29,555 --> 00:37:33,915
But to summarize, it just sets up like, how can I say it?

859
00:37:34,285 --> 00:37:38,225
Configurations in order for the Python test files

860
00:37:38,225 --> 00:37:41,505
to abide by for for example, we define a marker

861
00:37:41,505 --> 00:37:44,415
here called a sync io, and we give the description.

862
00:37:44,805 --> 00:37:45,135
Okay?

863
00:37:45,495 --> 00:37:48,675
So now if we go here in, in Cayo.

864
00:37:50,170 --> 00:37:54,570
Here, this will be understood by the Python test framework

865
00:37:54,570 --> 00:37:56,830
when you're running the script, because we define

866
00:37:56,830 --> 00:37:59,200
here, we define it here as well as the Python path.

867
00:37:59,350 --> 00:38:06,640
So here, if you remember when I say Python path pass no wait.

868
00:38:06,700 --> 00:38:10,685
I think this, yeah, this automatically the Python path, for src.

869
00:38:10,905 --> 00:38:13,725
So what this does is when we run this script using

870
00:38:13,725 --> 00:38:17,515
Python Library , in the environment where this script

871
00:38:17,515 --> 00:38:19,975
is running, it'll automatically put the source into the

872
00:38:20,005 --> 00:38:22,325
list of environment variables, the Python path file.

873
00:38:22,965 --> 00:38:26,505
You can see a detailed explanation of each of these keys , in

874
00:38:26,505 --> 00:38:29,985
the articles that I'll post with the description in this video.

875
00:38:30,325 --> 00:38:32,645
We rarely again, modify this file.

876
00:38:32,645 --> 00:38:36,335
So just knowing that it's related to the configurations

877
00:38:36,335 --> 00:38:38,885
of the pie test files is good enough for now.

878
00:38:39,915 --> 00:38:42,885
Then we have the README file where

879
00:38:45,075 --> 00:38:47,295
then we have the Readme file over here.

880
00:38:47,475 --> 00:38:49,545
The Readme file is a little bit outdated, to be honest.

881
00:38:50,145 --> 00:38:51,255
Just a quick shortcut.

882
00:38:51,255 --> 00:38:54,075
You can, in vs code, click on control shift

883
00:38:54,105 --> 00:38:57,315
v. To open the page in a preview review mode.

884
00:38:58,005 --> 00:39:02,205
Uh, so just a little bit cleaner than the markdown equivalent.

885
00:39:02,835 --> 00:39:05,175
And I know I should have started the recording with the README,

886
00:39:05,245 --> 00:39:08,635
but I did because there are also some other stuff in it.

887
00:39:09,005 --> 00:39:11,930
We'll add a link of this according to the Readme when we are done.

888
00:39:12,770 --> 00:39:17,490
Because it'll be more up to date, so I don't really need to go

889
00:39:17,490 --> 00:39:19,800
over its content because that's the whole purpose of this video.

890
00:39:20,850 --> 00:39:22,920
Just a quick tip, I can say, at least regarding

891
00:39:22,920 --> 00:39:25,520
this port, there's a quick way to auto generate a

892
00:39:25,520 --> 00:39:27,650
tip of content based on the markdown headers here.

893
00:39:27,650 --> 00:39:29,670
If you install a library called you installed that.

894
00:39:29,760 --> 00:39:29,790
Okay.

895
00:39:30,330 --> 00:39:32,550
And then you open the Command pallete in this code, which

896
00:39:32,550 --> 00:39:36,490
is in control shift P, which open this here, you can see

897
00:39:36,490 --> 00:39:40,510
table of content and here create table of content, uh,

898
00:39:40,510 --> 00:39:43,480
which when I press it, it generates, its this for me.

899
00:39:43,870 --> 00:39:45,580
And now when I update any of this

900
00:39:46,270 --> 00:39:48,370
and control s it gets updated here.

901
00:39:49,160 --> 00:39:52,580
This is also useful for documentation purposes.

902
00:39:53,780 --> 00:39:54,230
Okay.

903
00:39:54,590 --> 00:39:56,230
And, now for the.

904
00:39:57,425 --> 00:39:58,505
Requirement of text file.

905
00:39:58,535 --> 00:40:01,445
I'm going by this project bit by bit.

906
00:40:01,445 --> 00:40:05,315
Hopefully you are not bored from, requirements of text.

907
00:40:06,045 --> 00:40:08,835
So as you can see here, we don't put the

908
00:40:08,835 --> 00:40:11,405
entire , requirements like the, we don't pin, we

909
00:40:11,405 --> 00:40:13,535
don't pin the requirements, we don't put exact here.

910
00:40:14,135 --> 00:40:18,105
This is just for, easy upgrade purposes to easy upgrade things.

911
00:40:18,105 --> 00:40:19,635
And if we see issues.

912
00:40:20,370 --> 00:40:22,620
Between certain dependencies, we can pin versions.

913
00:40:22,620 --> 00:40:25,550
For example, this we pin this to these range of

914
00:40:25,550 --> 00:40:30,170
versions, I think because, version 2.0 could introduce,

915
00:40:30,230 --> 00:40:33,470
breaking changes in the API code that we have, uh,

916
00:40:33,470 --> 00:40:36,380
in the inpo itself where we used, this library.

917
00:40:36,810 --> 00:40:40,560
And so we don't want that and so we limited this to that.

918
00:40:40,615 --> 00:40:41,805
To that to that scope only.

919
00:40:42,435 --> 00:40:43,965
Uh, how do you know?

920
00:40:44,955 --> 00:40:48,855
You don't really, until you see stuff breaking in the life.

921
00:40:49,255 --> 00:40:51,895
But overall, overall, you we don't use

922
00:40:51,895 --> 00:40:54,365
pinning we use exact version in here.

923
00:40:54,575 --> 00:40:59,075
And so based on that, we don't use pip freeze commands.

924
00:40:59,285 --> 00:41:01,825
So the pip freeze command, it just tells you based

925
00:41:01,825 --> 00:41:03,445
on the environment that you have opened, the version

926
00:41:03,445 --> 00:41:05,365
environment that you have opened, the list of all the

927
00:41:05,365 --> 00:41:07,475
commands that you have, list of all the libraries that

928
00:41:07,475 --> 00:41:09,868
you installed, and with it pinning with its versions.

929
00:41:10,298 --> 00:41:11,763
But we don't want that ity.

930
00:41:12,008 --> 00:41:14,168
We just wanna state which libraries we

931
00:41:14,168 --> 00:41:16,448
actually ran the command pit installed on.

932
00:41:16,988 --> 00:41:17,378
Okay.

933
00:41:17,708 --> 00:41:21,428
Because the pip freeze commands it, it says these libraries

934
00:41:21,428 --> 00:41:25,538
that we installed and any other libraries, which the.

935
00:41:26,123 --> 00:41:28,043
Our installed library depend on.

936
00:41:28,553 --> 00:41:31,893
So if I installed Pandas, for example it

937
00:41:32,103 --> 00:41:34,263
installs it installed NumPy in the background.

938
00:41:34,353 --> 00:41:36,513
So you'll see, I believe, if I remember correctly,

939
00:41:37,173 --> 00:41:39,963
so we see MPI over here, even though I don't think

940
00:41:40,683 --> 00:41:43,948
we installed, yeah, we don't have PY here explicitly.

941
00:41:44,678 --> 00:41:45,218
If I, yeah.

942
00:41:45,488 --> 00:41:48,008
We don't wanna, we don't wanna make this list exhaustive.

943
00:41:48,248 --> 00:41:50,968
It's just for what we installed ourselves ourselves.

944
00:41:51,298 --> 00:41:51,883
So that means.

945
00:41:53,038 --> 00:41:56,438
Whenever we install a library in the future, if we are

946
00:41:56,438 --> 00:41:59,708
going to make any new feature, then we have to remember

947
00:41:59,978 --> 00:42:02,888
to put this install library as it's written here, we put

948
00:42:02,888 --> 00:42:05,708
it in its corresponding place in the requirements text.

949
00:42:05,708 --> 00:42:06,338
We do that manually.

950
00:42:06,848 --> 00:42:07,148
Okay.

951
00:42:07,808 --> 00:42:11,558
And sort it, preferably sorted, won't matter.

952
00:42:12,158 --> 00:42:14,408
This are a quick shortcut for short for sorting

953
00:42:14,648 --> 00:42:16,688
control shift p and then you say, sort find

954
00:42:16,688 --> 00:42:18,768
ascending and it'll sort them ascending.

955
00:42:18,768 --> 00:42:20,378
I'm sorry I go off topic a lot of

956
00:42:20,438 --> 00:42:22,068
with these tips, but they are useful.

957
00:42:22,878 --> 00:42:24,768
Now for the setup database file.

958
00:42:24,948 --> 00:42:25,248
Wow.

959
00:42:25,278 --> 00:42:25,758
We're back.

960
00:42:25,848 --> 00:42:26,718
We're back with this file again.

961
00:42:27,538 --> 00:42:32,128
So I explained this before, but again, basically this is

962
00:42:32,128 --> 00:42:36,668
just, uh, for you to be used by you, the developer locally

963
00:42:36,668 --> 00:42:38,648
to create the meeting tables in your local database.

964
00:42:39,218 --> 00:42:40,908
Uh, or the missing database in general.

965
00:42:40,908 --> 00:42:42,828
If you don't have database instance, you can start with this.

966
00:42:43,008 --> 00:42:43,278
Okay.

967
00:42:44,028 --> 00:42:45,828
But to be honest, I didn't try it myself.

968
00:42:46,068 --> 00:42:47,088
Like I myself did.

969
00:42:47,138 --> 00:42:49,533
The old fashioned method that I showed before showed

970
00:42:49,533 --> 00:42:51,933
you before is just copy and pasting as you see here.

971
00:42:52,503 --> 00:42:55,383
Uh, I think there was just a remark if for some

972
00:42:55,383 --> 00:42:57,063
reason you wanna follow this method instead.

973
00:42:57,663 --> 00:43:00,083
Uh, I think it's just something that I like

974
00:43:00,083 --> 00:43:02,483
a specific thing that you should comment.

975
00:43:02,813 --> 00:43:05,503
Yeah, here in in the in file four.

976
00:43:06,433 --> 00:43:09,973
In file four, which is this file, sorry, this file

977
00:43:10,933 --> 00:43:18,193
create type uh, if, okay, if you want to redo, database

978
00:43:18,193 --> 00:43:21,113
changes for example, you create a database instance

979
00:43:21,113 --> 00:43:24,553
and it has row in the table and you wanna wipe it all

980
00:43:24,553 --> 00:43:27,423
clean and truncate everything or remove it and then.

981
00:43:27,973 --> 00:43:29,923
Redefine the tables again for some reason.

982
00:43:30,403 --> 00:43:33,343
Then just be careful that you should comment this in

983
00:43:33,343 --> 00:43:36,973
any later reruns, uh, because it'll give you an error.

984
00:43:37,453 --> 00:43:40,133
It'll say that it'll say that the type feedback

985
00:43:40,133 --> 00:43:43,343
class is already defined because it is defined.

986
00:43:43,823 --> 00:43:45,623
I don't know if I will be able to bring it

987
00:43:45,623 --> 00:43:48,713
here, but it is defined in another port.

988
00:43:48,923 --> 00:43:52,643
Then the ports where the scheme is, are defined, I think in.

989
00:43:53,333 --> 00:43:56,973
Rules, not rules I won't go with now, but it, it remains in

990
00:43:56,973 --> 00:43:58,893
the editor that you're using and the idea that you're using.

991
00:43:59,253 --> 00:44:00,033
So it'll give an error.

992
00:44:00,423 --> 00:44:02,853
So in future res you can comment this out.

993
00:44:02,883 --> 00:44:04,713
If it's your very first time running

994
00:44:04,713 --> 00:44:06,003
this, then you can leave it in.

995
00:44:06,303 --> 00:44:06,603
Okay.

996
00:44:06,873 --> 00:44:08,103
It's just a very quick tip there.

997
00:44:08,283 --> 00:44:10,713
If again, for some reason you wanna copy paste all the

998
00:44:10,713 --> 00:44:13,803
files like I did, instead of using the setup, the file.

999
00:44:14,703 --> 00:44:15,033
Okay.

1000
00:44:15,033 --> 00:44:16,683
And now we're done with this file.

1001
00:44:16,803 --> 00:44:18,003
It really doesn't do anything else.

1002
00:44:18,003 --> 00:44:18,963
It just loops over them.

1003
00:44:19,353 --> 00:44:22,773
And then logs that it imported the, this

1004
00:44:22,773 --> 00:44:24,753
specific SQS script and then moves on.

1005
00:44:24,753 --> 00:44:27,093
It really doesn't do anything special.

1006
00:44:29,493 --> 00:44:32,533
and then comes Ah, I need to drink

1007
00:44:32,833 --> 00:44:34,333
water before explaining that part

